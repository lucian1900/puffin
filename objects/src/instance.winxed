namespace Python {

function id(obj) {
    int addr;
    ${get_addr addr, obj};
    return addr;
}

function in(arr, item) {
    for(var i in arr)
        if(id(i) == id(item))
            return true;

    return false;
}
 
function get_parents(cls) {

    var bases = cls.__dict__['__bases__'];
    var result = [];

    result.append(bases);
    
    for(var i in bases) {
        for(var j in get_parents(i)) 
            if(!in(result, j))
                result.push(j);
    }
    
    return result;
}

function get_mro(cls) {
    var chain = get_parents(cls);
    chain.unshift(cls);
    return chain;
}

class instance {
    var __dict__;

    function init [vtable,nsentry]() {
        var dict = {};
        dict['__dict__'] = dict;
        ${ setattribute self, class instance, '__dict__', dict };
    }

    function invoke[vtable](var p [slurpy], var n [slurpy,named]) {
        var sub;

        if(self.__class__ != null)
            sub = self.__class__.__call__;

        // if sub is a parrot Sub, it'll get executed
        // if sub is an instance with __call__, this invoke will get called,
        //   all the way down to a Sub somewhere
        return sub(self, p:[flat], n:[flat,named]);
    }

    function find_method[vtable](string name) {
        // likely broken
        var method = self.__dict__[name];

        // closure to soak up the obj
        return function(var obj, var p[slurpy], var n[slurpy,named]) {
            return method(p:[flat], n:[flat,named]);
        };
    }

    function get_pmc_keyed_str[vtable,nsentry](string name) {
        var dict;
        var protoclass = class Python.instance;
        ${ getattribute dict, self, protoclass, '__dict__' };
    
        if(name == '__dict__')
            return dict;

        // let object classes override it
        // since this is only used for boostrapping, bases are ignored
        if(exists dict['__class__']) {
            var cls = dict['__class__'];

            if(exists cls.__dict__['__getattribute__'])
                return cls.__dict__['__getattribute__'](self, name);

        }

        return dict[name];
    }

    function set_pmc_keyed_str[vtable,nsentry](string name, var value) {
        var dict;
        var protoclass = class Python.instance;
        ${ getattribute dict, self, protoclass, '__dict__' };
       
        // let object classes override it
        if(exists dict['__class__']) {
            var cls = dict['__class__'];

            if(exists cls.__dict__['__setattr__'])
                cls.__dict__['__setattr__'](self, name, value);

            return;
        }

        dict[name] = value;
    }

    function get_attr_str[vtable] (string name) {
        using Python.instance.get_pmc_keyed_str;
        return self.*get_pmc_keyed_str(name);
    }

    function set_attr_str[vtable] (string name, var value) {
        using Python.instance.set_pmc_keyed_str;
        return self.*set_pmc_keyed_str(name, value);
    }

    function get_pmc_keyed[vtable] (var name) {
        using Python.instance.get_pmc_keyed_str;
        return self.*get_pmc_keyed_str(name);
    }

    function set_pmc_keyed[vtable] (var name, var value) {
        using Python.instance.set_pmc_keyed_str;
        return self.*set_pmc_keyed_str(name, value);
    }

    function get_string[vtable] () {
        var str = self.__str__;
        if(str != null) return str(self);

        var repr = self.__repr__;
        if(repr != null) return repr(self); 
        
        return string(id(self));
    }
}

}

