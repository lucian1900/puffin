$load 'type.pbc';
$load 'int.pbc';
$load 'str.pbc';
$load 'tuple.pbc';
$load 'list.pbc';
$load 'function.pbc';
$load 'exception.pbc';

namespace Python [HLL] {

class core {
    var object;
    var type;
    
    var int;
    var str;

    var tuple;
    var list;
    var dict;
    
    var function;
    var BaseException;

    function core() {
        self.object = new type('object', null);
        self.type = new type('type', null, self.object);

        self.type.__class__ = self.type;
        self.object.__class__ = self.type;

        self.int = new int(self);
        self.str = new str(self);
        self.tuple = new tuple(self);
        self.list = new list(self);
        self.dict = new dict(self);

        self.function = new function(self);

        self.BaseException = new BaseException(self);
    }
}

function main() {
    var e = new python.core();
   
    //>>> object()
    //var i = e.object.new();

    //>>> i.__repr__()
    //say(i.get('__repr__')(i));
    

    //>>> def fn(): return 2
    //var fn = e.function.new(); 
    //fn.set('__call__', function() {return 2;});
    
    //>>> fn()
    //say(fn.get('__call__')());


    //>>> a = 20
    //var a = e.int.new();
    //a.get('__init__')(a, 20);
    
    //>>> b = 22
    //var b = e.int.new();
    //b.get('__init__')(b, 22);
    
    //>>> a + b
    //var c = a.get('__add__')(a, b);
    //say(c.get('__repr__')(c));


    //>>> tupins = (1,2,3)
    //var t = e.tuple.new();
    //t.get('__init__')(t, [1, 2, 3]);

    //>>> tupins[0]
    //say(t.get('__getitem__')(t, 0));

    //>>> tupins.__len__()
    //say(t.get('__len__')(t));

    //load_bytecode('dumper.pbc');
    //_dumper(t.__name__);
}

} // namespace
