namespace Python {

function type() {
    var t = new Python.instance;

    t.__class__ = t;

    t.__name__ = 'type';
    t.__module__ = 'builtins';

    t.__new__ = function(cls, name, bases) {
        var o = new Python.instance;

        o.__class__ = cls;
        o.__name__ = name;
        o.__bases__ = bases;

        return o;
    };

    t.__call__ = function(obj) {
        return obj.__class__;
    };

    t.__init__ = function(obj) {};

    t.__hash__ = function(obj) {
        return id(obj);
    };

    t.__repr__ = function(obj) {
        var sb = new 'StringBuilder';
        if(id(obj.__class__) == id(t)) // if object is a 'type'
            if(obj.__module__ == 'builtins')
                sb.append_format("<class '%0'>", obj.__name__);
            else
                sb.append_format("<class '%0.%1'>", obj.__module__, obj.__name__);
        else
            return null; //TypeError
        
        return string(sb);
    };
 
    t.__str__ = t.__repr__;

    t.__getattribute__ = function(obj, key) {
        var cls = obj.__dict__['__class__'];
        
        // first try descriptor among class attrs
        if(exists cls.__dict__[key]) {
            var attr = cls.__dict__[key];
    
             // if data-descriptor
             if(exists attr.__dict__['__get__'] &&
                exists attr.__dict__['__set__']) {
                 return attr.__dict__['__get__'](attr, obj);
             }
        }

        // then attr on actual obj
        if(exists obj.__dict__[key]) {
            var attr = obj.__dict__[key];

            // if obj is a class
            if(id(cls) == id(t)) {
                 
                var chain = get_mro(cls);
                // TODO check the class, also for descriptors
                // TODO also check its bases
            }

            return attr;
        }

        // then on the obj's class
        // TODO also base classes
        if(exists cls.__dict__[key]) {
            var attr = cls.__dict__[key];
            
            // if non-data descriptor
            if(exists attr.__dict__['__get__'])
                return attr.__dict__['__get__'](attr, obj);

            return attr;
        }

        // throw AttributeError
    };

    t.__setattr__ = function(obj, key, val) {
        var cls = obj.__dict__['__class__'];
    
        if(exists cls.__dict__[key]) {
            var attr = cls.__dict__[key];

            if(exists attr.__dict__['__set__'])
                attr.__dict__['__set__'](attr, obj, val);
        }

        obj.__dict__[key] = val;
    };

    return t;
}

}
