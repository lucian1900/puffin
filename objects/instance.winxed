namespace Python {

function id(obj) {
    int addr;
    ${get_addr addr, obj};
    return addr;
}

class instance {
    var __dict__;

    function init [vtable,nsentry]() {
        var dict = {};
        dict['__dict__'] = dict;
        ${ setattribute self, class instance, '__dict__', dict };
    }

    function invoke[vtable](var p [slurpy], var n [slurpy,named]) {
        var sub = self.__call__;
        if (self.__call__ == null) say('object not callable');

        // if sub is a parrot sub, it'll get executed
        // if sub is an instance with __call__, this invoke will get called
        //   all the way down to a sub
        return sub(p:[flat], n:[flat,named]);
    }

    function get_pmc_keyed_str[vtable,nsentry](string name) {
        var dict;
        var protoclass = class Python.instance;
        ${ getattribute dict, self, protoclass, '__dict__' };
    
        // __dict__ short-circuit
        if(name == '__dict__')
            return dict;
        // let objects override it
        else if(exists dict['__getattribute__'])
            return dict['__getattribute__'](self, name);
        // and their class and bases
        else if(exists dict['__mro__'])
            for(var i in dict['__mro__'])
                if(exists i.__dict__['__getattribute__'])
                    return i.__dict__['__getattribute__'](self, name);
        else //todo check for missing
            return dict[name];
    }

    function set_pmc_keyed_str[vtable,nsentry](string name, var value) {
        var dict;
        var protoclass = class Python.instance;
        ${ getattribute dict, self, protoclass, '__dict__' };
       
        // __dict__ short-circuit
        if(name == '__dict__')
            dict = value; //TODO use setattribute to swap dict
        // let objects override it
        else if(exists dict['__setattr__'])
            dict['__setattr__'](self, name, value);
        else
            dict[name] = value;
    }

    function get_attr_str[vtable] (string name) {
        using Python.instance.get_pmc_keyed_str;
        return self.*get_pmc_keyed_str(name);
    }

    function set_attr_str[vtable] (string name, var value) {
        using Python.instance.set_pmc_keyed_str;
        return self.*set_pmc_keyed_str(name, value);
    }

    function get_pmc_keyed[vtable] (var name) {
        using Python.instance.get_pmc_keyed_str;
        return self.*get_pmc_keyed_str(name);
    }

    function set_pmc_keyed[vtable] (var name, var value) {
        using Python.instance.set_pmc_keyed_str;
        return self.*set_pmc_keyed_str(name, value);
    }

    function get_string[vtable] () {
        var str = self.get_pmc_keyed_str('__str__');
        if(str != null) return str(self);

        var repr = self.get_pmc_keyed_str('__repr__');
        if(repr != null) return repr(self); 
        
        return string(id(self));
    }
}

}

