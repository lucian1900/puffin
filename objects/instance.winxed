namespace Python [HLL] {

class instance {
    var __dict__;

    function init [vtable,nsentry]() {
        var dict = {};
        dict['__dict__'] = dict;
        ${ setattribute self, class instance, '__dict__', dict };
    }

    function invoke[vtable](var p [slurpy], var n [slurpy,named]) {
        var sub = self.__call__;
        if (sub == null) say('object cannot be invoked');

        return sub(p:[flat], n:[flat,named]);
    }

    function find_method[vtable](string name) {
        var fn = name;
        return function(var obj, var p [slurpy], var n [slurpy,named]) {
            var f = null;
            if (exists obj.__dict__[fn])
                f = obj.__dict__[fn];
            //else search class & parent classes
            if (f == null) say('method cannot be found');
            
            return obj.*f(p:[flat], n:[flat,named]);
        };
    }

    function get_pmc_keyed_str[vtable,nsentry](string name) {
        var dict;
        var protoclass = class Python.instance;
        ${ getattribute dict, self, protoclass, '__dict__' };
        return dict[name];
    }

    function set_pmc_keyed_str[vtable,nsentry](string name, var value) {
        var dict;
        var protoclass = class Python.instance;
        ${ getattribute dict, self, protoclass, '__dict__' };
        dict[name] = value;
    }

    function get_attr_str[vtable] (string name) {
        using Python.instance.get_pmc_keyed_str;
        return self.*get_pmc_keyed_str(name);
    }

    function set_attr_str[vtable] (string name, var value) {
        using Python.instance.set_pmc_keyed_str;
        return self.*set_pmc_keyed_str(name, value);
    }

    function get_pmc_keyed[vtable] (var name) {
        using Python.instance.get_pmc_keyed_str;
        return self.*get_pmc_keyed_str(name);
    }

    function set_pmc_keyed[vtable] (var name, var value) {
        using Python.instance.set_pmc_keyed_str;
        return self.*set_pmc_keyed_str(name, value);
    }
}

}

function main() {
    var i = new Python.instance;
    i.__call__ = function() {
        say('calling');
    };
    i();

    i.a = 2;
    say(i.a);

    i.b = function(){say('hello');};
    i.b();

}
