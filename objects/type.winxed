$load 'instance.pbc';

namespace Python {

function type() {
    var t = new Python.instance;

    t.__class__ = t;
    t.__name__ = 'type';
    t.__bases__ = [];
    t.__module__ = 'builtins';

    t.__new__ = function(cls, name, bases) {
        var o = new Python.instance;

        o.__class__ = cls;
        o.__name__ = name;
        o.__bases__ = bases;

        return o;
    };

    t.__call__ = function(obj) {
        return obj.__class__;
    };

    t.__init__ = function(obj) {};

    t.__hash__ = function(obj) {
        return id(obj);
    };

    t.__repr__ = function(obj) {
        var sb = new 'StringBuilder';
        if(id(obj.__class__) == id(t)) // if object is a 'type'
            if(obj.__module__ == 'builtins')
                sb.append_format("<class '%0'>", obj.__name__);
            else
                sb.append_format("<class '%0.%1'>", obj.__module__, obj.__name__);
        else
            return null; //TypeError
        
        return string(sb);
    };
 
    t.__str__ = t.__repr__;

    t.__getattribute__ = function(obj, key) {
        var cls = obj.__dict__['__class__'];
        
        //first try descriptor
        if(exists cls.__dict__[key]) {
            var attr = cls.__dict__[key];

            if(typeof(attr) == 'Python;instance' &&
                exists attr.__dict__['__get__']) {

                var descriptor = attr.__dict__['__get__'];
                return descriptor(attr, obj);
            }
        }
        //TODO then descriptors of parents

        // then try instance
        if(exists obj.__dict__[key])
            return obj.__dict__[key];

        // then class
        if(exists cls.__dict__[key])
            return cls.__dict__[key];

        //TODO then parent classes
        for(var i in obj.__class__.__bases__) {
            if(exists i.__dict__[key])
                return i.__dict__[key];
        }

        // throw AttributeError
    };

    t.__setattr__ = function(obj, key, val) {
        obj.__dict__[key] = val;
    };

    return t;
}

}
