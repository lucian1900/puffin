$load 'instance.pbc';

namespace Python [HLL] {

function type() {
    var t = new Python.instance;

    t.__class__ = t;
    t.__name__ = 'type';
    t.__bases__ = [];

    t.__new__ = function(cls, name, bases[slurpy,optional]) {
        var o = new Python.instance;

        o.__class__ = cls;
        o.__name__ = name;
        o.__bases__ = bases;
    };

    t.__init__ = function(obj) {};

    t.__hash__ = function(obj) {
        int addr;
        ${get_addr addr, obj};
        return addr;
    };

    t.__repr__ = function(obj) {
        var sb = new 'StringBuilder';
        if(obj.__class__.__name__ == 'type')
            if(obj.__module__ == 'builtins')
                sb.append_format("<class '%0'>", obj.__name__);
            else
                sb.append_format("<class '%0.%1'>", obj.__module__, obj.__name__);
        else
            sb.append_format("<%0.%1 object at %2>",
                             obj.__class__.__module__, obj.__class__.__name__, obj.__hash__(obj)());
        return string(sb);
    };
        
    t.__str__ = t.__repr__;

    t.__getattribute__ = function(obj, key) {                
        var attr = obj.__dict__[key];

        if(attr == null)
            attr = obj.__class__.__dict__[key];

        if(attr == null)
            for(var i in obj.__class__.__bases__) {
                attr = i.__dict__[key];
                if(attr != null) break;
            }

        // descriptor
        return attr;
    };

    t.__setattr__ = function(obj, key, val) {
        obj.__dict__[key] = val;
    };

    return t;
}

}
