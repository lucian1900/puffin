$load 'instance.pbc';

namespace Python [HLL] {

function get_type() {
    var type = new Python.instance;

    type.__class__ = type;
    type.__name__ = 'type';
    type.__bases__ = [];
    type.__module__ = 'builtins';

    type.__new__ = function(obj, name, bases[slurpy,optional]) {
        var o = new Python.instance;

        o.__class__ = obj;
        o.__name__ = name;
        o.__bases__ = bases;
    };

    type.__init__ = function(obj) {};

    type.__hash__ = function(obj) {
        int addr;
        ${get_addr addr, obj};
        return addr;
    };

    type.__repr__ = function(obj) {
        var sb = new 'StringBuilder';
        if(obj.__class__.__name__ == 'type')
            if(obj.__module__ == 'builtins')
                sb.append_format("<class '%0'>", obj.__name__);
            else
                sb.append_format("<class '%0.%1'>", obj.__module__, obj.__name__);
        else
            sb.append_format("<%0.%1 object at %2>",
                             obj.__class__.__module__, obj.__class__.__name__, obj.__hash__(obj)());
        return string(sb);
    };
        
    type.__str__ = type.__repr__;

    type.__getattribute__ = function(obj, key) {                
        var attr = obj.__dict__[key];

        if(attr == null)
            attr = obj.__class__.__dict__[key];

        if(attr == null)
            for(var i in obj.__class__.__bases__) {
                attr = i.__dict__[key];
                if(attr != null) break;
            }

        return attr;
    };

    type.__setattr__ = function(obj, key, val) {
        obj.__dict__[key] = val;
    };

    return type;
}

}
