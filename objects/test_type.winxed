$load 'rosella/test.pbc';
$load 'type.pbc';
$load 'object.pbc';

function boot() {
    using Python.type;
    using Python.object;
    using Python;

    var t = Python.type();
    var o = Python.object(t);

    return t, o;
}

class type {
    function boot() {
        self.assert.throws_nothing(function(){
            :(var t, var o) = boot();
        });
    }

    function type_init() {
        :(var t, var o) = boot();

        self.assert.throws_nothing(function(){
            t.__init__(t);
        });
    }

    function type_class() {
        :(var t, var o) = boot();

        self.assert.same(t.__class__, t);
    }

    function object_class() {
        :(var t, var o) = boot();

        self.assert.same(o.__class__, t);
    }

    function type_repr() {
        :(var t, var o) = boot();

        self.assert.equal(t.__repr__(t), "<class 'type'>");
    }

    function object_repr() {
        :(var t, var o) = boot();

        self.assert.equal(o.__repr__(o), "<class 'object'>");
    }

    function object_get() {
        :(var t, var o) = boot();

        self.assert.same(o.__repr__, o.__dict__['__repr__']);
    }

    function instance_init() {
        :(var t, var o) = boot();

        self.status.todo('__init__ not yet a Python.function');

        var i = o.__new__(o);
        self.assert.throws_nothing(function(){
            i.get('__init__').get('__call__')();
        });
    }
        
    function instance_get() {
        :(var t, var o) = boot();

        var i = o.__new__(o);
        self.assert.same(i.__repr__, i.__class__.__dict__['__repr__']);
    }

    function type_set_attr() {
        :(var t, var o) = boot();

        o.foo = 'bar';
        self.assert.equal(o.foo, 'bar');
    }

    function instance_set_attr() {
        :(var t, var o) = boot();

        var i = o.__new__(o);
        i.foo = 'bar';
        self.assert.equal(i.foo, 'bar');
    }
}


function main() {
    using Rosella.Test.test;
    test(class type);
}

