$load 'rosella/test.pbc';
$load 'type.pbc';

function boot() {    
    var o = new Python.type('object', null);
    var t = new Python.type('type', null, o);

    t.__class__ = t;
    o.__class__ = t;

    return o, t;
}

class Testtype {
    function boot() {
        self.assert.throws_nothing(function(){
            boot();
        });
    }

    function type_init() {
        var t = new Python.type('type', null, null);
        self.assert.throws_nothing(function(){
            t.get('__init__')(t);
        });
    }

    function type_class() {
        var o; var t; :(o, t) = boot();
        self.assert.same(t.__class__, t);
    }

    function object_class() {
        var o; var t; :(o, t) = boot();
        self.assert.same(o.__class__, t);
    }

    function type_repr() {
        var o; var t; :(o, t) = boot();
        self.assert.equal(t.get('__repr__')(t), "<class 'type'>");
    }

    function object_repr() {
        var o; var t; :(o, t) = boot();
        self.assert.equal(o.get('__repr__')(o), "<class 'object'>");
    }

    function object_get() {
        var o; var t; :(o, t) = boot();
        self.assert.same(o.get('__repr__'), o.__dict__['__repr__']);
    }

    function instance_init() {
        self.status.unimplemented('__init__ not yet a Python.function');

        var o; var t; :(o, t) = boot();
        var i = new Python.instance(o);
        self.assert.throws_nothing(i.get('__init__').get('__call__')());
    }
        
    function instance_get() {
        var o; var t; :(o, t) = boot();
        var i = o.new();
        self.assert.same(i.get('__repr__'), i.__class__.__dict__['__repr__']);
    }

    function type_set_attr() {
        var o; var t; :(o, t) = boot();
        o.set('foo', 'bar');
        self.assert.equal(o.get('foo'), 'bar');
    }

    function instance_set_attr() {
        var o; var t; :(o, t) = boot();
        var i = o.new();
        i.set('foo', 'bar');
        self.assert.equal(i.get('foo'), 'bar');
    }
}


function main() {
    using Rosella.Test.test;
    test(class Testtype);
}

