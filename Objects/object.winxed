namespace Python [HLL] {

    class abstractobject {
        var __dict__;
        var __class__;
        var __bases__;
        
        function abstractobject() {
            self.__dict__ = new 'Hash';
            self.__bases__ = new 'ResizablePMCArray';
        }

        function getaddr() {
            int addr;
            ${get_addr addr, self};
            return addr;
        }
    }

    class type : abstractobject {
        var __name__;

        function type(string name) {
            self.abstractobject();

            self.__name__ = name;

            self.__dict__['__init__'] = function(obj) {};

            self.__dict__['__hash__'] = function(obj) {
                return obj.getaddr();
            };
            self.__dict__['__repr__'] = function(obj) {
                var sb = new 'StringBuilder';
                sb.append_format("<%0 object at %1>",
                                 obj.__class__.__name__, obj.getaddr());
                return string(sb);
            };
            self.__dict__['__str__'] = self.__dict__['__repr__'];

            self.__dict__['__getattribute__'] = function(obj, key) {                
                var attr = obj.__dict__[key];
    
                if(attr == null)
                    attr = obj.__class__.__dict__[key];
    
                if(attr == null)
                    for(var i in self.__bases__) {
                        attr = i.__dict__[key];
                        if(attr != null) break;
                    }

                return attr;
            };

            self.__dict__['__setattr__'] = function(obj, key, val) {
                obj.__dict__[key] = val;
            };
        }
    }

    class instance : abstractobject {
        function instance(var tp) {
            self.abstractobject();

            self.__class__ = tp;
            
            self.__dict__ = new 'Hash';
        }
   }

    function main() {
        var t = new type('type'); // py type
        t.__class__ = t;
    
        var o = new type('object'); // py object
        o.__class__ = t;
        
        t.__bases__.push(o);


        var i = new instance(o); // py object()
        say(i.__class__.__dict__['__getattribute__'](i, '__repr__')(i));

        //load_bytecode('dumper.pbc');
        //_dumper(t.__name__);
    }
}
