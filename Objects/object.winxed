namespace Python [HLL] {

function getaddr(obj) {
    int addr;
    ${get_addr addr, obj};
    return addr;
}

function getattr(obj, key) {
    
}

class type {
    var __dict__;
    var __class__;

    var __name__;
    var __bases__;

    function type(string name, var supertypes[slurpy]) {
        self.__name__ = name;
        self.__bases__ = supertypes;
        self.__dict__ = {};


        self.__dict__['__init__'] = function(obj) {};

        self.__dict__['__hash__'] = function(obj) {
            return getaddr(obj);
        };

        self.__dict__['__repr__'] = function(obj) {
            var sb = new 'StringBuilder';
            if(obj.__class__.__name__ == 'type')
                sb.append_format("<class '%0'>", obj.__name__);
            else
                sb.append_format("<%0 object at %1>",
                                 obj.__class__.__name__, getaddr(obj));
            return string(sb);
        };
        
        self.__dict__['__str__'] = self.__dict__['__repr__'];

        self.__dict__['__getattribute__'] = function(obj, key) {                
            var attr = obj.__dict__[key];

            if(attr == null)
                attr = obj.__class__.__dict__[key];

            if(attr == null)
                for(var i in obj.__class__.__bases__) {
                    attr = i.__dict__[key];
                    if(attr != null) break;
                }

            return attr;
        };

        self.__dict__['__setattr__'] = function(obj, key, val) {
            obj.__dict__[key] = val;
        };
    }

    function new() {
        return new instance(self);
    }
}

class instance {
    var __dict__;
    var __class__;
    var content;

    function instance(var tp) {
        self.__dict__ = {};
        self.__class__ = tp;
    }

    function get(key) {
        return self.__class__.__dict__['__getattribute__'](self, key);
    }

    function set(key, val) {
        self.__class__.__dict__['__setattr__'](self, key, val);
    }
}

class int : type {
    function int(env) {
        self.type('int', env.object);

        self.__dict__['__init__'] = function(obj, val) {
            obj.content = val;
        };
        self.__dict__['__repr__'] = function(obj) {
            return string(obj.content);
        };
        self.__dict__['__add__'] = function(obj, other) {
            var result = self.new();
            result.content = obj.content + other.content;
            return result;
        };

    }
}

class str : type {
    function str(env) {
        self.type('str', env.object);

        self.__dict__['__init__'] = function(obj, val) {
            obj.content = val;
        };
        self.__dict__['__repr__'] = function(obj) {
            return obj.content;
        };
    }
}

class tuple : type {
    function tuple(env) {
        self.type('tuple', env.object);

        // "slots"
        self.__dict__['__init__'] = function(obj, arr) {
            obj.content = arr;
        };
        self.__dict__['__getitem__'] = function(obj, index) {
            //return obj.content[index]; // this confuses winxed
            var item;
            ${set item, obj.content [index]};
            return item;
        };
        self.__dict__['__len__'] = function(obj) {
            return elements(obj.content);
        };
    }
}

class function : type {
    function function(env) {
        self.type('function', env.object);

        // "slots"
        self.__dict__['__call__'] = function(){};
    }
}

class core {
    var object;
    var type;
    
    var int;
    var str;

    var tuple;
    var list;
    var dict;
    
    var function;

    function core() {
        self.object = new type('object');
        self.type = new type('type', self.object);

        self.type.__class__ = self.type;
        self.object.__class__ = self.type;

        self.int = new int(self);
        self.str = new str(self);
        self.tuple = new tuple(self);
        //self.list = new list(self);
        //self.dict = new dict(self);
        self.function = new function(self);
    }
}

function main() {
    var e = new Python.core();
   
    //>>> object()
    var i = e.object.new();

    //>>> i.__repr__()
    say(i.get('__repr__')(i));
    

    //>>> def fn(): return 2
    var fn = e.function.new(); 
    fn.set('__call__', function() {return 2;});
    
    //>>> fn()
    say(fn.get('__call__')());


    //>>> a = 20
    var a = e.int.new();
    a.get('__init__')(a, 20);
    
    //>>> b = 22
    var b = e.int.new();
    b.get('__init__')(b, 22);
    
    //>>> a + b
    var c = a.get('__add__')(a, b);
    say(c.get('__repr__')(c));


    //>>> tupins = (1,2,3)
    var t = e.tuple.new();
    t.get('__init__')(t, [1, 2, 3]);

    //>>> tupins[0]
    say(t.get('__getitem__')(t, 0));

    //>>> tupins.__len__()
    say(t.get('__len__')(t));

    //load_bytecode('dumper.pbc');
    //_dumper(t.__name__);
}

} // namespace
